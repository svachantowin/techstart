// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecommerce/data_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecommerce_2fdata_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecommerce_2fdata_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ecommerce/packet_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecommerce_2fdata_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecommerce_2fdata_5fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecommerce_2fdata_5fresponse_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ecommerce_2fdata_5fresponse_2eproto_metadata_getter(int index);
namespace ecommerce {
class DataRequest;
struct DataRequestDefaultTypeInternal;
extern DataRequestDefaultTypeInternal _DataRequest_default_instance_;
class DataResponse;
struct DataResponseDefaultTypeInternal;
extern DataResponseDefaultTypeInternal _DataResponse_default_instance_;
class ECommerceData;
struct ECommerceDataDefaultTypeInternal;
extern ECommerceDataDefaultTypeInternal _ECommerceData_default_instance_;
}  // namespace ecommerce
PROTOBUF_NAMESPACE_OPEN
template<> ::ecommerce::DataRequest* Arena::CreateMaybeMessage<::ecommerce::DataRequest>(Arena*);
template<> ::ecommerce::DataResponse* Arena::CreateMaybeMessage<::ecommerce::DataResponse>(Arena*);
template<> ::ecommerce::ECommerceData* Arena::CreateMaybeMessage<::ecommerce::ECommerceData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ecommerce {

enum ItemType : int {
  NONE = 0,
  BIT_DATA = 1,
  SHORT_DATA = 2,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemType_IsValid(int value);
constexpr ItemType ItemType_MIN = NONE;
constexpr ItemType ItemType_MAX = SHORT_DATA;
constexpr int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor();
template<typename T>
inline const std::string& ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType_descriptor(), enum_t_value);
}
inline bool ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
// ===================================================================

class ECommerceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecommerce.ECommerceData) */ {
 public:
  inline ECommerceData() : ECommerceData(nullptr) {}
  virtual ~ECommerceData();
  explicit constexpr ECommerceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECommerceData(const ECommerceData& from);
  ECommerceData(ECommerceData&& from) noexcept
    : ECommerceData() {
    *this = ::std::move(from);
  }

  inline ECommerceData& operator=(const ECommerceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECommerceData& operator=(ECommerceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ECommerceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECommerceData* internal_default_instance() {
    return reinterpret_cast<const ECommerceData*>(
               &_ECommerceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ECommerceData& a, ECommerceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ECommerceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECommerceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ECommerceData* New() const final {
    return CreateMaybeMessage<ECommerceData>(nullptr);
  }

  ECommerceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ECommerceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ECommerceData& from);
  void MergeFrom(const ECommerceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECommerceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecommerce.ECommerceData";
  }
  protected:
  explicit ECommerceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ecommerce_2fdata_5fresponse_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqIdFieldNumber = 1,
    kItemTypeFieldNumber = 2,
    kBitValueFieldNumber = 3,
    kShortValueFieldNumber = 4,
  };
  // int32 uniq_id = 1;
  void clear_uniq_id();
  ::PROTOBUF_NAMESPACE_ID::int32 uniq_id() const;
  void set_uniq_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniq_id() const;
  void _internal_set_uniq_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ecommerce.ItemType item_type = 2;
  void clear_item_type();
  ::ecommerce::ItemType item_type() const;
  void set_item_type(::ecommerce::ItemType value);
  private:
  ::ecommerce::ItemType _internal_item_type() const;
  void _internal_set_item_type(::ecommerce::ItemType value);
  public:

  // bool bit_value = 3;
  void clear_bit_value();
  bool bit_value() const;
  void set_bit_value(bool value);
  private:
  bool _internal_bit_value() const;
  void _internal_set_bit_value(bool value);
  public:

  // int32 short_value = 4;
  void clear_short_value();
  ::PROTOBUF_NAMESPACE_ID::int32 short_value() const;
  void set_short_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_short_value() const;
  void _internal_set_short_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ecommerce.ECommerceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uniq_id_;
  int item_type_;
  bool bit_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 short_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecommerce_2fdata_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class DataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecommerce.DataResponse) */ {
 public:
  inline DataResponse() : DataResponse(nullptr) {}
  virtual ~DataResponse();
  explicit constexpr DataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataResponse(const DataResponse& from);
  DataResponse(DataResponse&& from) noexcept
    : DataResponse() {
    *this = ::std::move(from);
  }

  inline DataResponse& operator=(const DataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataResponse& operator=(DataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataResponse* internal_default_instance() {
    return reinterpret_cast<const DataResponse*>(
               &_DataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataResponse& a, DataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataResponse* New() const final {
    return CreateMaybeMessage<DataResponse>(nullptr);
  }

  DataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataResponse& from);
  void MergeFrom(const DataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecommerce.DataResponse";
  }
  protected:
  explicit DataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ecommerce_2fdata_5fresponse_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcommerceDataFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // repeated .ecommerce.ECommerceData ecommerce_data = 2;
  int ecommerce_data_size() const;
  private:
  int _internal_ecommerce_data_size() const;
  public:
  void clear_ecommerce_data();
  ::ecommerce::ECommerceData* mutable_ecommerce_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::ECommerceData >*
      mutable_ecommerce_data();
  private:
  const ::ecommerce::ECommerceData& _internal_ecommerce_data(int index) const;
  ::ecommerce::ECommerceData* _internal_add_ecommerce_data();
  public:
  const ::ecommerce::ECommerceData& ecommerce_data(int index) const;
  ::ecommerce::ECommerceData* add_ecommerce_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::ECommerceData >&
      ecommerce_data() const;

  // string msg_type = 1;
  void clear_msg_type();
  const std::string& msg_type() const;
  void set_msg_type(const std::string& value);
  void set_msg_type(std::string&& value);
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  std::string* mutable_msg_type();
  std::string* release_msg_type();
  void set_allocated_msg_type(std::string* msg_type);
  private:
  const std::string& _internal_msg_type() const;
  void _internal_set_msg_type(const std::string& value);
  std::string* _internal_mutable_msg_type();
  public:

  // @@protoc_insertion_point(class_scope:ecommerce.DataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::ECommerceData > ecommerce_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecommerce_2fdata_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class DataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecommerce.DataRequest) */ {
 public:
  inline DataRequest() : DataRequest(nullptr) {}
  virtual ~DataRequest();
  explicit constexpr DataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataRequest(const DataRequest& from);
  DataRequest(DataRequest&& from) noexcept
    : DataRequest() {
    *this = ::std::move(from);
  }

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequest& operator=(DataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataRequest* internal_default_instance() {
    return reinterpret_cast<const DataRequest*>(
               &_DataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataRequest& a, DataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRequest* New() const final {
    return CreateMaybeMessage<DataRequest>(nullptr);
  }

  DataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecommerce.DataRequest";
  }
  protected:
  explicit DataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ecommerce_2fdata_5fresponse_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTypeFieldNumber = 1,
  };
  // .ecommerce.PacketType packet_type = 1;
  void clear_packet_type();
  ::ecommerce::PacketType packet_type() const;
  void set_packet_type(::ecommerce::PacketType value);
  private:
  ::ecommerce::PacketType _internal_packet_type() const;
  void _internal_set_packet_type(::ecommerce::PacketType value);
  public:

  // @@protoc_insertion_point(class_scope:ecommerce.DataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int packet_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecommerce_2fdata_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ECommerceData

// int32 uniq_id = 1;
inline void ECommerceData::clear_uniq_id() {
  uniq_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECommerceData::_internal_uniq_id() const {
  return uniq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECommerceData::uniq_id() const {
  // @@protoc_insertion_point(field_get:ecommerce.ECommerceData.uniq_id)
  return _internal_uniq_id();
}
inline void ECommerceData::_internal_set_uniq_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uniq_id_ = value;
}
inline void ECommerceData::set_uniq_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniq_id(value);
  // @@protoc_insertion_point(field_set:ecommerce.ECommerceData.uniq_id)
}

// .ecommerce.ItemType item_type = 2;
inline void ECommerceData::clear_item_type() {
  item_type_ = 0;
}
inline ::ecommerce::ItemType ECommerceData::_internal_item_type() const {
  return static_cast< ::ecommerce::ItemType >(item_type_);
}
inline ::ecommerce::ItemType ECommerceData::item_type() const {
  // @@protoc_insertion_point(field_get:ecommerce.ECommerceData.item_type)
  return _internal_item_type();
}
inline void ECommerceData::_internal_set_item_type(::ecommerce::ItemType value) {
  
  item_type_ = value;
}
inline void ECommerceData::set_item_type(::ecommerce::ItemType value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:ecommerce.ECommerceData.item_type)
}

// bool bit_value = 3;
inline void ECommerceData::clear_bit_value() {
  bit_value_ = false;
}
inline bool ECommerceData::_internal_bit_value() const {
  return bit_value_;
}
inline bool ECommerceData::bit_value() const {
  // @@protoc_insertion_point(field_get:ecommerce.ECommerceData.bit_value)
  return _internal_bit_value();
}
inline void ECommerceData::_internal_set_bit_value(bool value) {
  
  bit_value_ = value;
}
inline void ECommerceData::set_bit_value(bool value) {
  _internal_set_bit_value(value);
  // @@protoc_insertion_point(field_set:ecommerce.ECommerceData.bit_value)
}

// int32 short_value = 4;
inline void ECommerceData::clear_short_value() {
  short_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECommerceData::_internal_short_value() const {
  return short_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECommerceData::short_value() const {
  // @@protoc_insertion_point(field_get:ecommerce.ECommerceData.short_value)
  return _internal_short_value();
}
inline void ECommerceData::_internal_set_short_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  short_value_ = value;
}
inline void ECommerceData::set_short_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_short_value(value);
  // @@protoc_insertion_point(field_set:ecommerce.ECommerceData.short_value)
}

// -------------------------------------------------------------------

// DataResponse

// string msg_type = 1;
inline void DataResponse::clear_msg_type() {
  msg_type_.ClearToEmpty();
}
inline const std::string& DataResponse::msg_type() const {
  // @@protoc_insertion_point(field_get:ecommerce.DataResponse.msg_type)
  return _internal_msg_type();
}
inline void DataResponse::set_msg_type(const std::string& value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:ecommerce.DataResponse.msg_type)
}
inline std::string* DataResponse::mutable_msg_type() {
  // @@protoc_insertion_point(field_mutable:ecommerce.DataResponse.msg_type)
  return _internal_mutable_msg_type();
}
inline const std::string& DataResponse::_internal_msg_type() const {
  return msg_type_.Get();
}
inline void DataResponse::_internal_set_msg_type(const std::string& value) {
  
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataResponse::set_msg_type(std::string&& value) {
  
  msg_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecommerce.DataResponse.msg_type)
}
inline void DataResponse::set_msg_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ecommerce.DataResponse.msg_type)
}
inline void DataResponse::set_msg_type(const char* value,
    size_t size) {
  
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecommerce.DataResponse.msg_type)
}
inline std::string* DataResponse::_internal_mutable_msg_type() {
  
  return msg_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataResponse::release_msg_type() {
  // @@protoc_insertion_point(field_release:ecommerce.DataResponse.msg_type)
  return msg_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataResponse::set_allocated_msg_type(std::string* msg_type) {
  if (msg_type != nullptr) {
    
  } else {
    
  }
  msg_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecommerce.DataResponse.msg_type)
}

// repeated .ecommerce.ECommerceData ecommerce_data = 2;
inline int DataResponse::_internal_ecommerce_data_size() const {
  return ecommerce_data_.size();
}
inline int DataResponse::ecommerce_data_size() const {
  return _internal_ecommerce_data_size();
}
inline void DataResponse::clear_ecommerce_data() {
  ecommerce_data_.Clear();
}
inline ::ecommerce::ECommerceData* DataResponse::mutable_ecommerce_data(int index) {
  // @@protoc_insertion_point(field_mutable:ecommerce.DataResponse.ecommerce_data)
  return ecommerce_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::ECommerceData >*
DataResponse::mutable_ecommerce_data() {
  // @@protoc_insertion_point(field_mutable_list:ecommerce.DataResponse.ecommerce_data)
  return &ecommerce_data_;
}
inline const ::ecommerce::ECommerceData& DataResponse::_internal_ecommerce_data(int index) const {
  return ecommerce_data_.Get(index);
}
inline const ::ecommerce::ECommerceData& DataResponse::ecommerce_data(int index) const {
  // @@protoc_insertion_point(field_get:ecommerce.DataResponse.ecommerce_data)
  return _internal_ecommerce_data(index);
}
inline ::ecommerce::ECommerceData* DataResponse::_internal_add_ecommerce_data() {
  return ecommerce_data_.Add();
}
inline ::ecommerce::ECommerceData* DataResponse::add_ecommerce_data() {
  // @@protoc_insertion_point(field_add:ecommerce.DataResponse.ecommerce_data)
  return _internal_add_ecommerce_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::ECommerceData >&
DataResponse::ecommerce_data() const {
  // @@protoc_insertion_point(field_list:ecommerce.DataResponse.ecommerce_data)
  return ecommerce_data_;
}

// -------------------------------------------------------------------

// DataRequest

// .ecommerce.PacketType packet_type = 1;
inline void DataRequest::clear_packet_type() {
  packet_type_ = 0;
}
inline ::ecommerce::PacketType DataRequest::_internal_packet_type() const {
  return static_cast< ::ecommerce::PacketType >(packet_type_);
}
inline ::ecommerce::PacketType DataRequest::packet_type() const {
  // @@protoc_insertion_point(field_get:ecommerce.DataRequest.packet_type)
  return _internal_packet_type();
}
inline void DataRequest::_internal_set_packet_type(::ecommerce::PacketType value) {
  
  packet_type_ = value;
}
inline void DataRequest::set_packet_type(::ecommerce::PacketType value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:ecommerce.DataRequest.packet_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ecommerce

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ecommerce::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ecommerce::ItemType>() {
  return ::ecommerce::ItemType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecommerce_2fdata_5fresponse_2eproto
