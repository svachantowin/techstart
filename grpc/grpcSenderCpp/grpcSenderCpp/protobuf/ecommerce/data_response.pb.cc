// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecommerce/data_response.proto

#include "ecommerce/data_response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ecommerce {
constexpr ECommerceData::ECommerceData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uniq_id_(0)
  , item_type_(0)

  , bit_value_(false)
  , short_value_(0){}
struct ECommerceDataDefaultTypeInternal {
  constexpr ECommerceDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECommerceDataDefaultTypeInternal() {}
  union {
    ECommerceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECommerceDataDefaultTypeInternal _ECommerceData_default_instance_;
constexpr DataResponse::DataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ecommerce_data_()
  , msg_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DataResponseDefaultTypeInternal {
  constexpr DataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataResponseDefaultTypeInternal() {}
  union {
    DataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataResponseDefaultTypeInternal _DataResponse_default_instance_;
constexpr DataRequest::DataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packet_type_(0)
{}
struct DataRequestDefaultTypeInternal {
  constexpr DataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataRequestDefaultTypeInternal() {}
  union {
    DataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataRequestDefaultTypeInternal _DataRequest_default_instance_;
}  // namespace ecommerce
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ecommerce_2fdata_5fresponse_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ecommerce_2fdata_5fresponse_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ecommerce_2fdata_5fresponse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ecommerce_2fdata_5fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecommerce::ECommerceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecommerce::ECommerceData, uniq_id_),
  PROTOBUF_FIELD_OFFSET(::ecommerce::ECommerceData, item_type_),
  PROTOBUF_FIELD_OFFSET(::ecommerce::ECommerceData, bit_value_),
  PROTOBUF_FIELD_OFFSET(::ecommerce::ECommerceData, short_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecommerce::DataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecommerce::DataResponse, msg_type_),
  PROTOBUF_FIELD_OFFSET(::ecommerce::DataResponse, ecommerce_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecommerce::DataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecommerce::DataRequest, packet_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ecommerce::ECommerceData)},
  { 9, -1, sizeof(::ecommerce::DataResponse)},
  { 16, -1, sizeof(::ecommerce::DataRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecommerce::_ECommerceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecommerce::_DataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecommerce::_DataRequest_default_instance_),
};

const char descriptor_table_protodef_ecommerce_2fdata_5fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035ecommerce/data_response.proto\022\tecommer"
  "ce\032\033ecommerce/packet_type.proto\"p\n\rEComm"
  "erceData\022\017\n\007uniq_id\030\001 \001(\005\022&\n\titem_type\030\002"
  " \001(\0162\023.ecommerce.ItemType\022\021\n\tbit_value\030\003"
  " \001(\010\022\023\n\013short_value\030\004 \001(\005\"R\n\014DataRespons"
  "e\022\020\n\010msg_type\030\001 \001(\t\0220\n\016ecommerce_data\030\002 "
  "\003(\0132\030.ecommerce.ECommerceData\"9\n\013DataReq"
  "uest\022*\n\013packet_type\030\001 \001(\0162\025.ecommerce.Pa"
  "cketType*2\n\010ItemType\022\010\n\004NONE\020\000\022\014\n\010BIT_DA"
  "TA\020\001\022\016\n\nSHORT_DATA\020\0022K\n\013DataService\022<\n\007g"
  "etData\022\026.ecommerce.DataRequest\032\027.ecommer"
  "ce.DataResponse0\001B$\n com.techstart.proto"
  "buf.ecommerceP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ecommerce_2fdata_5fresponse_2eproto_deps[1] = {
  &::descriptor_table_ecommerce_2fpacket_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ecommerce_2fdata_5fresponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecommerce_2fdata_5fresponse_2eproto = {
  false, false, 503, descriptor_table_protodef_ecommerce_2fdata_5fresponse_2eproto, "ecommerce/data_response.proto", 
  &descriptor_table_ecommerce_2fdata_5fresponse_2eproto_once, descriptor_table_ecommerce_2fdata_5fresponse_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_ecommerce_2fdata_5fresponse_2eproto::offsets,
  file_level_metadata_ecommerce_2fdata_5fresponse_2eproto, file_level_enum_descriptors_ecommerce_2fdata_5fresponse_2eproto, file_level_service_descriptors_ecommerce_2fdata_5fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_ecommerce_2fdata_5fresponse_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ecommerce_2fdata_5fresponse_2eproto);
  return descriptor_table_ecommerce_2fdata_5fresponse_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ecommerce_2fdata_5fresponse_2eproto(&descriptor_table_ecommerce_2fdata_5fresponse_2eproto);
namespace ecommerce {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ecommerce_2fdata_5fresponse_2eproto);
  return file_level_enum_descriptors_ecommerce_2fdata_5fresponse_2eproto[0];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ECommerceData::_Internal {
 public:
};

ECommerceData::ECommerceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ecommerce.ECommerceData)
}
ECommerceData::ECommerceData(const ECommerceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uniq_id_, &from.uniq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&short_value_) -
    reinterpret_cast<char*>(&uniq_id_)) + sizeof(short_value_));
  // @@protoc_insertion_point(copy_constructor:ecommerce.ECommerceData)
}

void ECommerceData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uniq_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&short_value_) -
    reinterpret_cast<char*>(&uniq_id_)) + sizeof(short_value_));
}

ECommerceData::~ECommerceData() {
  // @@protoc_insertion_point(destructor:ecommerce.ECommerceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ECommerceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ECommerceData::ArenaDtor(void* object) {
  ECommerceData* _this = reinterpret_cast< ECommerceData* >(object);
  (void)_this;
}
void ECommerceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECommerceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECommerceData::Clear() {
// @@protoc_insertion_point(message_clear_start:ecommerce.ECommerceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uniq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&short_value_) -
      reinterpret_cast<char*>(&uniq_id_)) + sizeof(short_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECommerceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uniq_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uniq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ecommerce.ItemType item_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_type(static_cast<::ecommerce::ItemType>(val));
        } else goto handle_unusual;
        continue;
      // bool bit_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bit_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 short_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          short_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ECommerceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecommerce.ECommerceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uniq_id = 1;
  if (this->uniq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uniq_id(), target);
  }

  // .ecommerce.ItemType item_type = 2;
  if (this->item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_item_type(), target);
  }

  // bool bit_value = 3;
  if (this->bit_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bit_value(), target);
  }

  // int32 short_value = 4;
  if (this->short_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_short_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecommerce.ECommerceData)
  return target;
}

size_t ECommerceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecommerce.ECommerceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uniq_id = 1;
  if (this->uniq_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uniq_id());
  }

  // .ecommerce.ItemType item_type = 2;
  if (this->item_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_item_type());
  }

  // bool bit_value = 3;
  if (this->bit_value() != 0) {
    total_size += 1 + 1;
  }

  // int32 short_value = 4;
  if (this->short_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_short_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ECommerceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecommerce.ECommerceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ECommerceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ECommerceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecommerce.ECommerceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecommerce.ECommerceData)
    MergeFrom(*source);
  }
}

void ECommerceData::MergeFrom(const ECommerceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecommerce.ECommerceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uniq_id() != 0) {
    _internal_set_uniq_id(from._internal_uniq_id());
  }
  if (from.item_type() != 0) {
    _internal_set_item_type(from._internal_item_type());
  }
  if (from.bit_value() != 0) {
    _internal_set_bit_value(from._internal_bit_value());
  }
  if (from.short_value() != 0) {
    _internal_set_short_value(from._internal_short_value());
  }
}

void ECommerceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecommerce.ECommerceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECommerceData::CopyFrom(const ECommerceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecommerce.ECommerceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECommerceData::IsInitialized() const {
  return true;
}

void ECommerceData::InternalSwap(ECommerceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECommerceData, short_value_)
      + sizeof(ECommerceData::short_value_)
      - PROTOBUF_FIELD_OFFSET(ECommerceData, uniq_id_)>(
          reinterpret_cast<char*>(&uniq_id_),
          reinterpret_cast<char*>(&other->uniq_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECommerceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataResponse::_Internal {
 public:
};

DataResponse::DataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ecommerce_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ecommerce.DataResponse)
}
DataResponse::DataResponse(const DataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ecommerce_data_(from.ecommerce_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_type().empty()) {
    msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ecommerce.DataResponse)
}

void DataResponse::SharedCtor() {
msg_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DataResponse::~DataResponse() {
  // @@protoc_insertion_point(destructor:ecommerce.DataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataResponse::ArenaDtor(void* object) {
  DataResponse* _this = reinterpret_cast< DataResponse* >(object);
  (void)_this;
}
void DataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ecommerce.DataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ecommerce_data_.Clear();
  msg_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecommerce.DataResponse.msg_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ecommerce.ECommerceData ecommerce_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ecommerce_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecommerce.DataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_type = 1;
  if (this->msg_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_type().data(), static_cast<int>(this->_internal_msg_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecommerce.DataResponse.msg_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg_type(), target);
  }

  // repeated .ecommerce.ECommerceData ecommerce_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ecommerce_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ecommerce_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecommerce.DataResponse)
  return target;
}

size_t DataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecommerce.DataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ecommerce.ECommerceData ecommerce_data = 2;
  total_size += 1UL * this->_internal_ecommerce_data_size();
  for (const auto& msg : this->ecommerce_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg_type = 1;
  if (this->msg_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecommerce.DataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecommerce.DataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecommerce.DataResponse)
    MergeFrom(*source);
  }
}

void DataResponse::MergeFrom(const DataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecommerce.DataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ecommerce_data_.MergeFrom(from.ecommerce_data_);
  if (from.msg_type().size() > 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
}

void DataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecommerce.DataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResponse::CopyFrom(const DataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecommerce.DataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResponse::IsInitialized() const {
  return true;
}

void DataResponse::InternalSwap(DataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ecommerce_data_.InternalSwap(&other->ecommerce_data_);
  msg_type_.Swap(&other->msg_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataRequest::_Internal {
 public:
};

DataRequest::DataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ecommerce.DataRequest)
}
DataRequest::DataRequest(const DataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packet_type_ = from.packet_type_;
  // @@protoc_insertion_point(copy_constructor:ecommerce.DataRequest)
}

void DataRequest::SharedCtor() {
packet_type_ = 0;
}

DataRequest::~DataRequest() {
  // @@protoc_insertion_point(destructor:ecommerce.DataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataRequest::ArenaDtor(void* object) {
  DataRequest* _this = reinterpret_cast< DataRequest* >(object);
  (void)_this;
}
void DataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ecommerce.DataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packet_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ecommerce.PacketType packet_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_packet_type(static_cast<::ecommerce::PacketType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecommerce.DataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ecommerce.PacketType packet_type = 1;
  if (this->packet_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packet_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecommerce.DataRequest)
  return target;
}

size_t DataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecommerce.DataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ecommerce.PacketType packet_type = 1;
  if (this->packet_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packet_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecommerce.DataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecommerce.DataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecommerce.DataRequest)
    MergeFrom(*source);
  }
}

void DataRequest::MergeFrom(const DataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecommerce.DataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packet_type() != 0) {
    _internal_set_packet_type(from._internal_packet_type());
  }
}

void DataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecommerce.DataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRequest::CopyFrom(const DataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecommerce.DataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequest::IsInitialized() const {
  return true;
}

void DataRequest::InternalSwap(DataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(packet_type_, other->packet_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ecommerce
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ecommerce::ECommerceData* Arena::CreateMaybeMessage< ::ecommerce::ECommerceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecommerce::ECommerceData >(arena);
}
template<> PROTOBUF_NOINLINE ::ecommerce::DataResponse* Arena::CreateMaybeMessage< ::ecommerce::DataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecommerce::DataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ecommerce::DataRequest* Arena::CreateMaybeMessage< ::ecommerce::DataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecommerce::DataRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
