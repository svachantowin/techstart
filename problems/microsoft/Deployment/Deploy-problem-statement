C1 -> c5,c3
C2 -> C7
C3 -> c4
c5 -> c8


Deployment Sequence 
-> pre-req to be deployed before actual component


Comp[c1,... cn]
dep

1 ->  [3,5]
2 ->  [7]
3 ->  [4]
4 ->  []
5 ->  [8]
6 ->  []
7 ->  []
8 ->  []
9 ->  [1]


1 -> [4,3,8,5]
2 -> [7]
3 -> [4]
4 -> []
5 -> [8]
6 -> []
7 -> []
8 -> []
9 -> [4,3,8,5,1] 


List<List<Integer>> identifyPreReq(int[][] compDepend){
	
	// Todo - Check for boundary condition before processing

	int rows = compDepend.length;
	int cols = comDepend[0].length;

	List<List<Integer>> completeDep = new ArrayList<();

	//List<List<Integer>> deployGraph = new ArrayList<>();
	Map<int,List<Integer> paralleDepList = new HashMap<>();

	for(int i=0;i<rows;i++){
		for(int j=0;j<cols;j++){
			Map<int,boolean> visited = new HashMap<>();
			List<Integer> dependencies = new ArrayList<>();
			traverse(new int[]{i,j},compDepend,visited,dependencies)
			if(dependencies.size()==0){
				dependecies.add(i);
			}
			completeDep.add(dependencies);
			paralleDepList.put(dependencies.size(),dependencies);
	}


	for(List<Integer> deps : parallelDepList.values()){
		for(Integer id : deps){
			deployComponent(deps)
		}		
	}

} 

void deployComponent(int index){
	//Deploy the component
}

void traverse(int[] index , int[][] compDepend, Map<int,boolean> visited, List<Integer> dependencies ){
	
	int row = index[0];
	int col = index[1];

	for(int i=0;i<compDepend[index].length;i++){
		//visited[index][i] = 1;
		traverse(new int[]{row,col}],compDepend,visited,dependecies);		
	}
	dependencies.add(index);

}




















